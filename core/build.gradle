apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'maven-publish'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    namespace 'com.lcy.base.core'

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //  Support库
    api 'androidx.appcompat:appcompat:1.7.0'
    api 'com.google.android.material:material:1.12.0'
    api 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    //  网络请求库
    api rootProject.ext.networkLibs
    //  RxJava
    api rootProject.ext.rxJavaLibs
    //  其他
    api rootProject.ext.otherLibs
    //  multiDex
    api rootProject.ext.multidexLibs
    //  kotlin
    api rootProject.ext.kotlinLibs
    api(rootProject.ext.glideV4["glide"]) {
        exclude group: 'com.android.support'
    }
    //  配置retrofit动态url库
    api 'me.jessyan:retrofit-url-manager:1.4.0'
    // hilt
    api "com.google.dagger:hilt-android:2.53.1"
    kapt "com.google.dagger:hilt-compiler:2.53.1"
}

// 增加上传源码的task
tasks.register('sourceJar', Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = "sources"
}

publishing {
    publications {
        aarAndroid(MavenPublication) {
            groupId = 'com.github.lcyluo'
            artifactId = 'core'
            version = '1.4.3'
            // 增加上传源码的 task
            artifact sourceJar
            // 必须有这个 否则不会上传AAR包
            afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }

            // pom文件中声明依赖，从而传递到使用方
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    // 避免出现空节点或 artifactId=unspecified 的节点
                    if (it.group != null && (it.name != null && "unspecified" != it.name) && it.version != null) {
                        println "dependency=${it.toString()}"
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'implementation')
                    }
                }
            }
        }
    }
}
